import { ConfigurationHost, EmbeddedLanguageServicePlugin } from '@volar/vue-language-service-types';
import type * as html from 'vscode-html-languageservice';
import type * as _ from 'vscode-languageserver-protocol';
export interface DocumentService extends ReturnType<typeof getDocumentService> {
}
export declare function getDocumentService({ typescript: ts }: {
    typescript: typeof import('typescript/lib/tsserverlibrary');
}, configurationHost: ConfigurationHost | undefined, fileSystemProvider: html.FileSystemProvider | undefined, customPlugins: EmbeddedLanguageServicePlugin[]): {
    format: (document: html.TextDocument, options: _.FormattingOptions) => Promise<_.TextEdit[] | undefined>;
    getFoldingRanges: (document: html.TextDocument) => Promise<_.FoldingRange[] | undefined>;
    getSelectionRanges: (document: html.TextDocument, positions: _.Position[]) => Promise<_.SelectionRange[] | undefined>;
    findLinkedEditingRanges: (document: html.TextDocument, position: _.Position) => Promise<_.LinkedEditingRanges | undefined>;
    findDocumentSymbols: (document: html.TextDocument) => Promise<_.SymbolInformation[] | undefined>;
    findDocumentColors: (document: html.TextDocument) => Promise<_.ColorInformation[] | undefined>;
    getColorPresentations: (document: html.TextDocument, color: _.Color, range: _.Range) => Promise<_.ColorPresentation[] | undefined>;
    doAutoInsert: (document: html.TextDocument, position: _.Position, options: {
        lastChange: {
            range: _.Range;
            rangeOffset: number;
            rangeLength: number;
            text: string;
        };
    }) => Promise<string | _.TextEdit | undefined>;
};
